#!/usr/bin/env python 
# Copyright (c) 2013 Simon van Heeringen <s.vanheeringen@ncmls.ru.nl>
#
# This module is free software. You can redistribute it and/or modify it under 
# the terms of the MIT License, see the file COPYING included with this 
# distribution.
import argparse
from gimmemotifs.config import MotifConfig
from  gimmemotifs import commands

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(title='subcommands')

config = MotifConfig()
params = config.get_default_params()

# gimme_motifs.py
p = subparsers.add_parser('motifs')
p.add_argument("inputfile", 
               help="Inputfile in BED or FASTA format", 
               metavar="INPUTFILE")
p.add_argument("-k", "--keepintermediate", 
               dest="keep_intermediate", 
               help="Don't delete intermediate files", 
               default=False, 
               action="store_true")
p.add_argument("-n", "--name", 
               dest="name",
               help="Give your analysis a name", 
               metavar="NAME")
p.add_argument("-a", "--analysis",
               dest="analysis",
               help="Analysis type: small, medium, large, xl (%s)" % params["analysis"], 
               metavar="ANALYSIS", 
               default=params["analysis"])
p.add_argument("-g", "--genome", 
               dest="genome", 
               help="Genome version (%s)" % (params["genome"]),
               metavar="VERSION", 
               default=params["genome"])
p.add_argument("-s", "--singlestrand", 
               dest="single", 
               help="Only predict motifs for single + strand (default is both)", 
               action="store_true", 
               default=False)
p.add_argument("-f", "--fraction", 
               dest="fraction", 
               help="Fraction of peaks to use for motif predicton (%s)" % params["fraction"], 
               metavar="FRACTION",
               default=params["fraction"], 
               type=float)
p.add_argument("-w", "--width", 
               dest="width", 
               help="Width to use for motif prediction (%s)" % params["width"], 
               metavar="N", 
               default=params["width"], 
               type=int)
p.add_argument("-e", "--enrichment", 
               dest="enrichment", 
               help="Motif significance: enrichment cutoff (>%s)" % params["enrichment"], 
               metavar="N", 
               default=params["enrichment"], 
               type=float)
p.add_argument("-p", "--pvalue", 
               dest="pvalue", 
               help="Motif significance: p-value cutoff (<%s)" % params["pvalue"], 
               metavar="N", 
               default=params["pvalue"], 
               type=float)
p.add_argument("-b", "--background", 
               dest="background", 
               help="Background to determine significance genomic_matched,random,promoter,user (%s)" % params["background"], 
               metavar="N", 
               default=params["background"])
p.add_argument("-u", "--user_background", 
               dest="user_background", 
               help="User-specified, FASTA formatted  background file, use in combination with the '-b user' option", 
               metavar="FILE")
p.add_argument("-l", "--localization_width", 
               dest="lwidth", 
               help="Width to use for motif localization graphs (%s)" % params["lwidth"], 
               metavar="N", 
               default=params["lwidth"], 
               type=int)
p.add_argument("-t", "--tools", 
               dest="tools", 
               help="Tools to use, any combination of %s (default %s)" % (params["available_tools"], 
               params["tools"]), 
               metavar="N", 
               default=params["tools"])
p.add_argument("--max_time", 
               dest="max_time", 
               help="Time limit for motif prediction in hours (default: %s)" % str(params["max_time"]), 
               metavar="HOURS", 
               default=params["max_time"])
p.add_argument("-m", "--markov", 
               dest="markov_model", 
               help="Specify Markov model, default is 1 for 1st order", 
               default=1)
p.set_defaults(func=commands.motifs)

# gimme_max.py
p = subparsers.add_parser('maxenr')
p.add_argument("pwmfile", 
               help="File with pwms", 
               metavar="PWMFILE")
p.add_argument("sample", 
               help="FASTA file", 
               metavar="FG_FAFILE")
p.add_argument("background", 
               help="FASTA file with background sequences", 
               metavar="BG_FAFILE")
p.add_argument("-i", 
               dest="ids", 
               help="Comma-seperated list of motif ids to use (default is all ids)", 
               metavar="IDS")
p.set_defaults(func=commands.maxenr)

# closest_match.py
p = subparsers.add_parser('match')
p.add_argument("pwmfile", 
               help="File with pwms", 
               metavar="PWMFILE")
p.add_argument("dbpwmfile", 
               help="File with pwms to match against", 
               metavar="DBFILE")
p.add_argument("-o", 
               dest="img", 
               help="Output file with graphical report (png, svg, ps, pdf)", 
               metavar="FILE")
p.set_defaults(func=commands.match)

# motif_roc.py and motif_roc_metrics.py
p = subparsers.add_parser('roc')
p.add_argument("pwmfile", 
               help="File with pwms", 
               metavar="PWMFILE")
p.add_argument("sample", 
               help="FASTA file", 
               metavar="FG_FAFILE")
p.add_argument("background", 
               help="FASTA file with background sequences", 
               metavar="BG_FAFILE")
p.add_argument("-o", 
               dest="outfile", 
               help="Name of output file with ROC plot (png, svg, ps, pdf)", 
               metavar="FILE")
p.add_argument("-i", 
               dest="ids", 
               help="Comma-seperated list of motif ids to plot in ROC (default is all ids)", 
               metavar="IDS")
p.set_defaults(func=commands.roc)

# motif_cluster.py
p = subparsers.add_parser('cluster')
p.add_argument("-i",
               dest="inputfile", 
               help="Inputfile (PFM format)", 
               metavar="FILE")
p.add_argument("-o", 
               dest="outdir", 
               help="Name of output directory", 
               metavar="FILE")
p.add_argument("-b", 
               dest="include_bg", 
               help="bg (don't use this)", 
               default=True, 
               action="store_false")
p.add_argument("-s", 
                dest="single", 
                help="Don't compare reverse complements of motifs", 
                default=False,
                action="store_true")
p.add_argument("-t", 
               dest="threshold", 
               help="Cluster threshold", 
               default=0.95, 
               type=float)
p.set_defaults(func=commands.cluster)

# create_genome_index.py
default_index = config.get_index_dir()
p = subparsers.add_parser('index')
p.add_argument("-i", "--indexdir", 
               dest="indexdir", 
               help="Index dir (default %s)" % default_index, 
               metavar="DIR", 
               default=default_index)
p.add_argument("-f", "--fastadir", 
               dest="fastadir", 
               help="Directory containing fastafiles", 
               metavar="DIR")
p.add_argument("-n", "--indexname", 
               dest="indexname", 
               help="Name of index", 
               metavar="NAME")
p.set_defaults(func=commands.index)

subparsers.add_parser('background')

args = parser.parse_args()
args.func(args)
